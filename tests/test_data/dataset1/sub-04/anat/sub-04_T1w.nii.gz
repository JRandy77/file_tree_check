longer random text

stat.ST_DEV

    Device inode resides on.

stat.ST_NLINK

    Number of links to the inode.

stat.ST_UID

    User id of the owner.

stat.ST_GID

    Group id of the owner.

stat.ST_SIZE

    Size in bytes of a plain file; amount of data waiting on some special files.

stat.ST_ATIME

    Time of last access.

stat.ST_MTIME

    Time of last modification.

stat.ST_CTIME

    The “ctime” as reported by the operating system. On some systems (like Unix) is the time of the last metadata change, and, on others (like Windows), is the creation time (see platform documentation for details).

The interpretation of “file size” changes according to the file type. For plain files this is the size of the file in bytes. For FIFOs and sockets under most flavors of Unix (including Linux in particular), the “size” is the number of bytes waiting to be read at the time of the call to os.stat(), os.fstat(), or os.lstat(); this can sometimes be useful, especially for polling one of these special files after a non-blocking open. The meaning of the size field for other character and block devices varies more, depending on the implementation of the underlying system call.

The variables below define the flags used in the ST_MODE field.

Use of the functions above is more portable than use of the first set of flags:

stat.S_IFSOCK

    Socket.

stat.S_IFLNK

    Symbolic link.

stat.S_IFREG

    Regular file.

stat.S_IFBLK

    Block device.

stat.S_IFDIR

    Directory.

stat.S_IFCHR

    Character device.

stat.S_IFIFO

    FIFO.

stat.S_IFDOOR

    Door.

    New in version 3.4.

stat.S_IFPORT

    Event port.

    New in version 3.4.

stat.S_IFWHT

    Whiteout.

    New in version 3.4.

Note

S_IFDOOR, S_IFPORT or S_IFWHT are defined as 0 when the platform does not have support for the file types.

The following flags can also be used in the mode argument of os.chmod():

stat.S_ISUID

    Set UID bit.

stat.S_ISGID

    Set-group-ID bit. This bit has several special uses. For a directory it indicates that BSD semantics is to be used for that directory: files created there inherit their group ID from the directory, not from the effective group ID of the creating process, and directories created there will also get the S_ISGID bit set. For a file that does not have the group execution bit (S_IXGRP) set, the set-group-ID bit indicates mandatory file/record locking (see also S_ENFMT).

stat.S_ISVTX

    Sticky bit. When this bit is set on a directory it means that a file in that directory can be renamed or deleted only by the owner of the file, by the owner of the directory, or by a privileged process.

stat.S_IRWXU

    Mask for file owner permissions.

stat.S_IRUSR

    Owner has read permission.

stat.S_IWUSR

    Owner has write permission.

stat.S_IXUSR

    Owner has execute permission.

stat.S_IRWXG

    Mask for group permissions.

stat.S_IRGRP

    Group has read permission.

stat.S_IWGRP

    Group has write permission.

stat.S_IXGRP

    Group has execute permission.

stat.S_IRWXO

    Mask for permissions for others (not in group).

stat.S_IROTH

    Others have read permission.

stat.S_IWOTH

    Others have write permission.

stat.S_IXOTH

    Others have execute permission
stat.UF_APPEND

    The file may on

stat.SF_APPEND
stat.FILE_ATTRIBUTE_INTEGRITY_STREAM
stat.FILE_ATTRIBUTE_NORMAL
stat.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED
stat.FILE_ATTRIBUTE_NO_SCRUB_DATA
stat.FILE_ATTRIBUTE_OFFLINE
stat.FILE_ATTRIBUTE_READONLY
stat.FILE_ATTRIBUTE_REPARSE_POINT
stat.FILE_ATTRIBUTE_SPARSE_FILE
stat.FILE_ATTRIBUTE_SYSTEM
stat.FILE_ATTRIBUTE_TEMPORARY
stat.FILE_ATTRIBUTE_VIRTUAL

    New in version 3.5.

On Windows, the following constants are available for comparing against the st_reparse_tag member returned by os.lstat(). These are well-known constants, but are not an exhaustive list.

stat.IO_REPARSE_TAG_SYMLINK
stat.IO_REPARSE_TAG_MOUNT_POINT
stat.IO_REPARSE_TAG_APPEXECLINK

    New in version 3.8.

ome additional tips and tricks.
Dictionary literals

Perhaps the most commonly used way of constructing a python dictionary is with curly bracket syntax:
1
	
d = {"age":25}

As dictionaries are mutable, you need not know all the entries in advance:
1
2
3
4
	
# Empty dict
d = {}
# Fill in the entries one by one
d["age"] = 25
From a list of tuples

You can also construct a dictionary from a list (or any iterable) of key, value pairs. For instance:
1
	
d = dict([("age", 25)])

This is perhaps most useful in the context of a list comprehension:
1
2
3
4
5
6
7
8
9
	
class Person(object):
    def __init__(self, name, profession):
        self.name = name
        self.profession = profession
 
people = [Person("Nick", "Programmer"), Person("Alice","Engineer")]
professions = dict([ (p.name, p.profession) for p in people ])
>>> print professions
{"Nick": "Programmer", "Alice": "Engineer"}

This is equivalent, though a bit shorter, to the following:
1
2
3
4
	
people = [Person("Nick", "Programmer"), Person("Alice","Engineer")]
professions = {}
for p in people:
    professions[p.name] = p.profession

This form of creating a dictionary is good for when you have a dynamic rather than static list of elements.
From two parallel lists

This method of constructing a dictionary is intimately related to the prior example. Say you have two lists of elements, perhaps pulled from a database table:
1
2
3
	
# Static lists for purpose of illustration
names = ["Nick", "Alice", "Kitty"]
professions = ["Programmer", "Engineer", "Art Therapist"]

If you wished to create a dictionary from name to profession, you could do the following:
1
2
3
	
professions_dict = {}
for i in range(len(names)):
    professions_dict[names[i]] = professions[i]

This is not ideal, however, as it involves an explicit iterator, and is starting to look like Java. The more Pythonic way to handle this case would be to use the zip method, which combines two iterables:
1
2
3
4
5
6
7
8
9
	
print zip(range(5), ["a","b","c","d","e"])
[(0, "a"), (1, "b"), (2, "c"), (3, "d"), (4, "e")]
 
names_and_professions = zip(names, professions)
print names_and_professions
[("Nick", "Programmer"), ("Alice", "Engineer"), ("Kitty", "Art Therapist")]
 
for name, profession in names_and_professions:
    professions_dict[name] = profession

As you can see, this is extremely similar to the previous section. You can dispense the iteration, and instead use the dict method:
1
2
3
4
	
professions_dict = dict(names_and_professions)
# You can dispence the extra variable and create an anonymous
# zipped list:
professions_dict = dict(zip(names, professions))
Further reading

zip

dict
Share this:

    TwitterPrintEmailFacebook

Related

Python - "dict comprehension"
February 4, 2013
In "Python"

Python Gotcha #1: Default arguments and mutable data structures
August 23, 2010
In "Java"

S

Previous topic

fileinput — Iterate over lines from multiple input streams
Next topic

filecmp — File and Directory Comparisons
This Page

    Report a Bug
    Show Source

«

    index
    modules |
    next |
    previous |
    Python » 3.9.5 Documentation » The Python Standard Library » File and Directory Access »

    e of last access.

stat.ST_MTIME

    Time of last modification.

stat.ST_CTIME

    The “ctime” as reported by the operating system. On some systems (like Unix) is the time of the last metadata change, and, on others (like Windows), is the creation time (see platform documentation for details).

The interpretation of “file size” changes according to the file type. For plain files this is the size of the file in bytes. For FIFOs and sockets under most flavors of Unix (including Linux in particular), the “size” is the number of bytes waiting to be read at the time of the call to os.stat(), os.fstat(), or os.lstat(); this can sometimes be useful, especially for polling one of these special files after a non-blocking open. The meaning of the size field for other character and block devices varies more, depending on the implementation of the underlying system call.

The variables below define the flags used in the ST_MODE field.

Use of the functions above is more portable than use of the first set of flags:

stat.S_IFSOCK
e of last access.

stat.ST_MTIME

    Time of last modification.

stat.ST_CTIME

    The “ctime” as reported by the operating system. On some systems (like Unix) is the time of the last metadata change, and, on others (like Windows), is the creation time (see platform documentation for details).

The interpretation of “file size” changes according to the file type. For plain files this is the size of the file in bytes. For FIFOs and sockets under most flavors of Unix (including Linux in particular), the “size” is the number of bytes waiting to be read at the time of the call to os.stat(), os.fstat(), or os.lstat(); this can sometimes be useful, especially for polling one of these special files after a non-blocking open. The meaning of the size field for other character and block devices varies more, depending on the implementation of the underlying system call.

The variables below define the flags used in the ST_MODE field.

Use of the functions above is more portable than use of the first set of flags:

stat.S_IFSOCK
e of last access.

stat.ST_MTIME

    Time of last modification.

stat.ST_CTIME

    The “ctime” as reported by the operating system. On some systems (like Unix) is the time of the last metadata change, and, on others (like Windows), is the creation time (see platform documentation for details).

The interpretation of “file size” changes according to the file type. For plain files this is the size of the file in bytes. For FIFOs and sockets under most flavors of Unix (including Linux in particular), the “size” is the number of bytes waiting to be read at the time of the call to os.stat(), os.fstat(), or os.lstat(); this can sometimes be useful, especially for polling one of these special files after a non-blocking open. The meaning of the size field for other character and block devices varies more, depending on the implementation of the underlying system call.

The variables below define the flags used in the ST_MODE field.

Use of the functions above is more portable than use of the first set of flags:

stat.S_IFSOCK
e of last access.

stat.ST_MTIME

    Time of last modification.

stat.ST_CTIME

    The “ctime” as reported by the operating system. On some systems (like Unix) is the time of the last metadata change, and, on others (like Windows), is the creation time (see platform documentation for details).

The interpretation of “file size” changes according to the file type. For plain files this is the size of the file in bytes. For FIFOs and sockets under most flavors of Unix (including Linux in particular), the “size” is the number of bytes waiting to be read at the time of the call to os.stat(), os.fstat(), or os.lstat(); this can sometimes be useful, especially for polling one of these special files after a non-blocking open. The meaning of the size field for other character and block devices varies more, depending on the implementation of the underlying system call.

The variables below define the flags used in the ST_MODE field.

Use of the functions above is more portable than use of the first set of flags:

stat.S_IFSOCK